// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SonodaSoftware.Services;

namespace SonodaSoftware.Data;

public partial class SND_DBContext : DbContext
{
    public SND_DBContext()
    {
    }

    public SND_DBContext(DbContextOptions<SND_DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Job_EventType> Job_EventTypes { get; set; }

    public virtual DbSet<Job_NameJob> Job_NameJobs { get; set; }

    public virtual DbSet<Job_Part_inStore> Job_Part_inStores { get; set; }

    public virtual DbSet<Job_Status> Job_Statuses { get; set; }

    public virtual DbSet<Job_partLog> Job_partLogs { get; set; }

    public virtual DbSet<Store_AddPart> Store_AddParts { get; set; }

    public virtual DbSet<Store_AddQTY> Store_AddQTies { get; set; }

    public virtual DbSet<Store_AddSupplier> Store_AddSuppliers { get; set; }

    public virtual DbSet<Store_Approve> Store_Approves { get; set; }

    public virtual DbSet<Store_DeletePart> Store_DeleteParts { get; set; }

    public virtual DbSet<Store_DeleteSupplier> Store_DeleteSuppliers { get; set; }

    public virtual DbSet<Store_Do> Store_Dos { get; set; }

    public virtual DbSet<Store_Do_Datail> Store_Do_Datails { get; set; }

    public virtual DbSet<Store_EditPart> Store_EditParts { get; set; }

    public virtual DbSet<Store_EditSupplier> Store_EditSuppliers { get; set; }

    public virtual DbSet<Store_Part> Store_Parts { get; set; }

    public virtual DbSet<Store_PartGroup> Store_PartGroups { get; set; }

    public virtual DbSet<Store_PickUp> Store_PickUps { get; set; }

    public virtual DbSet<Store_PickUp_Detail> Store_PickUp_Details { get; set; }

    public virtual DbSet<Store_Supplier> Store_Suppliers { get; set; }

    public virtual DbSet<Tool> Tools { get; set; }

    public virtual DbSet<Tool_Borrow> Tool_Borrows { get; set; }

    public virtual DbSet<Tool_BorrowDetail> Tool_BorrowDetails { get; set; }

    public virtual DbSet<Tool_Event> Tool_Events { get; set; }

    public virtual DbSet<User_Access> User_Accesses { get; set; }

    public virtual DbSet<User_Organize> User_Organizes { get; set; }

    public virtual DbSet<User_UserBase> User_UserBases { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer(Appsetting.ConnectionStrings);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Job_EventType>(entity =>
        {
            entity.Property(e => e.Type).ValueGeneratedNever();
        });

        modelBuilder.Entity<Job_Part_inStore>(entity =>
        {
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Job_Status>(entity =>
        {
            entity.Property(e => e.StatusType).ValueGeneratedNever();
        });

        modelBuilder.Entity<Store_AddPart>(entity =>
        {
            entity.HasOne(d => d.Supplier).WithMany(p => p.Store_AddParts).HasConstraintName("FK_Store_AddPart_Store_Supplier");
        });

        modelBuilder.Entity<Store_AddQTY>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_Store_AddQTY_1");
        });

        modelBuilder.Entity<Store_Do>(entity =>
        {
            entity.Property(e => e.SupplierID).IsFixedLength();
        });

        modelBuilder.Entity<Store_Do_Datail>(entity =>
        {
            entity.HasOne(d => d.DO).WithMany(p => p.Store_Do_Datails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Store_Do_Datail_Store_Do");
        });

        modelBuilder.Entity<Store_PickUp_Detail>(entity =>
        {
            entity.HasOne(d => d.PickUp).WithMany(p => p.Store_PickUp_Details)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Store_PickUp_Detail_Store_PickUp_Detail");
        });

        modelBuilder.Entity<Tool_Borrow>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_Borrow_1");
        });

        modelBuilder.Entity<Tool_BorrowDetail>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_BorrowDetail_1");

            entity.HasOne(d => d.Borrow).WithMany(p => p.Tool_BorrowDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BorrowDetail_Borrow");
        });

        modelBuilder.Entity<Tool_Event>(entity =>
        {
            entity.HasKey(e => e.LogID).HasName("PK_ToolEvent");
        });

        modelBuilder.Entity<User_Access>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_Access");
        });

        modelBuilder.Entity<User_Organize>(entity =>
        {
            entity.HasKey(e => e.DepartmentType).HasName("PK_SNSOrganize");

            entity.Property(e => e.DepartmentType).ValueGeneratedNever();
        });

        modelBuilder.Entity<User_UserBase>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_SND_UserBase_1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}